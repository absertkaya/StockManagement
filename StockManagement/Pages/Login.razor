@page "/"
@page "/login"
@using Microsoft.Identity.Client;
@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;
@using StockManagement.Graph;
@using StockManagement.Domain
@using StockManagement.Domain.IRepositories
@inject IJSRuntime JSRuntime
@inject IUserRepository  UserRepository
@inject IConfiguration _configuration
@inject ProtectedApiCallHelper ProtectedApiCallHelper
@inject AuthenticationStateProvider AuthenticationStateProvider
<h1>Login</h1>

<form method="post">
    <div class="form-group">
        <label for="username">Gebruikersnaam</label>
        <input id="username" type="text" class="form-control" />
    </div>
    <div class="form-group">
        <label for="password">Wachtwoord</label>
        <input id="password" type="text" class="form-control" />
    </div>
    <input class="btn btn-primary" type="submit" value="Login" />
</form>
<div class="row justify-content-center">
    <div class="col-md-6">
        <img class="img-fluid" src="/images/logo.jpg" />
    </div>
</div>

@code {
    protected override async Task OnInitializedAsync()
    {

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (UserRepository.GetByEmail(user.Identity.Name) == null)
        {
            IConfidentialClientApplication confidentialClientApplication =
            ConfidentialClientApplicationBuilder
            .Create(_configuration["AzureAd:ClientId"])
            .WithTenantId(_configuration["AzureAd:TenantId"])
            .WithClientSecret(_configuration["AzureAd:ClientSecret"])
            .Build();
        string[] scopes = new string[] { "https://graph.microsoft.com/.default" };
        AuthenticationResult result = null;
        result = await confidentialClientApplication.AcquireTokenForClient(scopes)
            .ExecuteAsync();
        var httpClient = new HttpClient();
        var apiCaller = new ProtectedApiCallHelper(httpClient);
        var res = await apiCaller
            .CallWebApiAndProcessResultASync(
            $"https://graph.microsoft.com/v1.0/users/{user.Identity.Name}",
            result.AccessToken
            );
            SaveAndUpdateUser(res);
        }
        
    }

    private void SaveAndUpdateUser(JObject res)
    {
        GraphUser user = JsonConvert.DeserializeObject<GraphUser>(res.ToString());
        ADUser aduser = new ADUser(user);
        UserRepository.Save(aduser);
    }
}