@page "/itemform/in"
@page "/itemform/in/{serialnr}"
@using StockManagement.Domain;
@using StockManagement.Domain.IRepositories;
@inject IItemRepository  Repository
@inject NavigationManager NavigationManager

<h1>Zet item in stock</h1>

<EditForm Model="@_item" OnValidSubmit="HandleValidSubmit">
    <div class="form-group">
        <label for="serialnr">Serienummer</label>
        <input class="form-control" type="text" @bind="SerialNr"/>
    </div>
    <div class="form-group">
        <label for="category">Category</label>
        <select id="category" class="form-control" value="@_selectedCategory" @onchange="FireChange">
            <option value="" selected hidden>Kies een categorie</option>

            @if (_categories != null)
            {
                @foreach (Category cat in _categories)
                {
                    <option value=@cat.Id>@cat.CategoryName</option>
                }
            }
        </select>
    </div>
    <div class="form-group">
        <label for="product">Product</label>
        <select id="product" class="form-control" @bind="_selectedDescription">
            <option value="" selected hidden>Kies een product</option>
            @if (_descriptions != null)
            {
                @foreach (Product item in _descriptions)
                {
                    <option value=@item.Id>@item.Description</option>
                }
            }
        </select>
    </div>
    <div class="form-group">
        <label for="supplier">Leverancier</label>
        <select id="supplier" class="form-control" @bind="_selectedSupplier">
            <option value="" selected hidden>Kies een leverancier</option>
            @if (_suppliers != null)
            {
                @foreach (Supplier supplier in _suppliers)
                {
                    <option value=@supplier.Id>@supplier.SupplierName</option>
                }
            }
        </select>
    </div>
    <div class="form-group">
        <label for="isdefective">Is defect</label>
        <input id="isdefective" class="form-check" type="checkbox" checked="@_isDefective" @onchange="@CheckDefective" />
    </div>
    <div class="form-group">
        <label for="comment">Opmerkingen</label>
        <InputTextArea id="comment" class="form-control" @bind-Value="_comment"></InputTextArea>
    </div>

    <button class="btn btn-primary" type="submit">Voeg toe</button>
</EditForm>


@code {

    [Parameter]
    public string SerialNr { get; set; }

    private Item _item = new Item();

    private IList<Category> _categories;
    private IList<Product> _descriptions;
    private IList<Supplier> _suppliers;
    private IList<ADUser> _users;

    private int? _selectedCategory;
    private int? _selectedDescription;
    private int? _selectedSupplier;
    private bool _isDefective;
    private string _comment;

    private void CheckDefective()
    {
        _isDefective = !_isDefective;
    }

    protected override async Task OnInitializedAsync()
    {
        _categories = await Repository.GetAll<Category>();
        _suppliers = await Repository.GetAll<Supplier>();
        _users = await Repository.GetAll<ADUser>();
        _item = Repository.GetBySerialNr(SerialNr);
        if (_item == null)
        {
            _item = new Item();
        } else
        {
            _selectedCategory = _item.Product.Category.Id;
            await FetchDescriptions();
            _selectedSupplier = _item.Supplier?.Id;
            _isDefective = _item.IsDefective;
            _comment = _item.Comment;
        }

    }

    public async Task FireChange(ChangeEventArgs e)
    {
        _selectedCategory = int.Parse(e.Value.ToString());
        await FetchDescriptions();
    }

    public async Task FetchDescriptions()
    {
        if (_selectedCategory != null)
        {
            _descriptions = await Repository.GetByCategory((int)_selectedCategory);
            _selectedDescription = _item.Product?.Id;
        }
    }

    private void HandleValidSubmit()
    {
        _item.SerialNumber = SerialNr;
        _item.Product = _descriptions.FirstOrDefault(i => _selectedDescription == i.Id);
        _item.Supplier = _suppliers.FirstOrDefault(i => _selectedSupplier == i.Id);
        _item.ADUser = null;
        _item.IsDefective = _isDefective;
        _item.Comment = _comment;
        _item.InStock = true;
        Repository.Save(_item);
        NavigationManager.NavigateTo("updatesucces/in/" + _selectedDescription, true);

    }
}
