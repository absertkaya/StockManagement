@page "/calendars"
@using Microsoft.Identity.Client;
@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;
@using StockManagement.Graph;
@inject IConfiguration _configuration
@inject ProtectedApiCallHelper ProtectedApiCallHelper
<div class="form-group">
    <label>Gebruiker</label>
    <select class="form-control" @bind="@UserId">
        <option value="" hidden selected>Kies een gebruiker</option>
        @foreach (var user in
        _colGraphUsers.OrderBy(x => x.DisplayName))
        {
            <option value="@user.Id">
                @user.DisplayName
            </option>
        }
    </select>
</div>


@code {
    public string UserId { get; set; }
    private List<GraphUser> _colGraphUsers = new List<GraphUser>();

    protected override async Task OnInitializedAsync()
    {
        IConfidentialClientApplication confidentialClientApplication =
        ConfidentialClientApplicationBuilder
        .Create(_configuration["AzureAd:ClientId"])
        .WithTenantId(_configuration["AzureAd:TenantId"])
        .WithClientSecret(_configuration["AzureAd:ClientSecret"])
        .Build();
        string[] scopes = new string[] { "https://graph.microsoft.com/.default" };
        AuthenticationResult result = null;
        result = await confidentialClientApplication.AcquireTokenForClient(scopes)
        .ExecuteAsync();
        var httpClient = new HttpClient();
        var apiCaller = new ProtectedApiCallHelper(httpClient);
        await apiCaller
        .CallWebApiAndProcessResultASync(
        "https://graph.microsoft.com/v1.0/users",
        result.AccessToken,
        DisplayUsers
        );
    }

    public GraphUser GetSelectedUser()
    {
        return _colGraphUsers.FirstOrDefault(u => u.Id == UserId);
    }

    private void DisplayUsers(JObject result)
    {
        _colGraphUsers = new List<GraphUser>();
        foreach (JProperty child in result.Properties()
            .Where(p => !p.Name.StartsWith("@")))
        {
            _colGraphUsers.AddRange(
                child.Value.ToObject<List<GraphUser>>()
                );
        }
        // If there are users set the first as the default
        if (_colGraphUsers.Count > 0)
        {
            UserId = _colGraphUsers
                .OrderBy(x => x.DisplayName)
                .FirstOrDefault().Id;
        }
    }



}
