@page "/"
@namespace StockManagement.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>StockManagement</title>
    <base href="~/" />
    <link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />
    <link href="css/site.css" rel="stylesheet" />
</head>
<body>
    <app>
        <component type="typeof(App)" render-mode="ServerPrerendered" />
    </app>

    <div id="blazor-error-ui">
        <environment include="Staging,Production"> 
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>

    <script src="_framework/blazor.server.js"></script>
    <script type="text/javascript" src="https://unpkg.com/@@zxing/library@@latest"></script>
    <script type="text/javascript">
        window.JsFunctions = {
            scanner: function () {
                let selectedDeviceId;
                const codeReader = new ZXing.BrowserBarcodeReader()
                console.log('ZXing code reader initialized')
                codeReader.getVideoInputDevices()
                    .then((videoInputDevices) => {
                        const sourceSelect = document.getElementById('sourceSelect')
                        selectedDeviceId = videoInputDevices[0].deviceId
                        if (videoInputDevices.length > 1) {
                            videoInputDevices.forEach((element) => {
                                const sourceOption = document.createElement('option')
                                sourceOption.text = element.label
                                sourceOption.value = element.deviceId
                                sourceSelect.appendChild(sourceOption)
                            })

                            sourceSelect.onchange = () => {
                                selectedDeviceId = sourceSelect.value;
                            }

                            const sourceSelectPanel = document.getElementById('sourceSelectPanel')
                            sourceSelectPanel.style.display = 'block'
                        }

                        document.getElementById('startButton').addEventListener('click', () => {
                            codeReader.decodeOnceFromVideoDevice(selectedDeviceId, 'video').then((result) => {
                                console.log(result)
                                document.getElementById('result').value = result.text
                                document.getElementById('result').dispatchEvent(new Event("change"))
                            }).catch((err) => {
                                console.error(err)
                            })
                            console.log(`Started continous decode from camera with id ${selectedDeviceId}`)
                        })

                        document.getElementById('resetButton').addEventListener('click', () => {
                            document.getElementById('result').value = '';
                            codeReader.reset();
                            console.log('Reset.')
                        })

                    })
                    .catch((err) => {
                        console.error(err)
                    })
            }
        }
    </script>
</body>
</html>
