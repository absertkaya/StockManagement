@page "/categorie"
@page "/categorie/{id:int}"
@using StockManagement.Domain
@using StockManagement.Domain.IRepositories
@inject IItemRepository Repository
@inject NavigationManager NavigationManager

<h3>Nieuwe Categorie</h3>

<EditForm EditContext="_editContext" OnValidSubmit="Submit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="category">Categorienaam</label>
        <InputText @bind-Value="@_category.CategoryName" type="text" class="form-control" id="category" placeholder="Categorienaam"/>
    </div>
    <div class="form-group">
        <label for="imgurl">AfbeeldingURL</label>
        <InputText @bind-Value="@_category.ImgURL" type="text" class="form-control" id="imgurl" placeholder="URL"/>
    </div>
    <div class="form-group">
        @if (Id == null)
        {
            <button type="submit" class="btn btn-primary">Voeg toe</button>
        }
        else
        {
            <button type="submit" class="btn btn-primary">Update</button>
        }

        <button @onclick="Back" class="btn btn-secondary">Terug</button>
    </div>
</EditForm>

@if (_submitFail)
{
    <p class="text-danger">Ongeldige invoergegevens</p>
}

@code {

    [Parameter]
    public int? Id { get; set; }

    private Category _category = new Category();
    private EditContext _editContext;

    private bool _submitFail;

    protected override void OnInitialized()
    {
        _editContext = new EditContext(_category);
    }

    private void Submit()
    {
        if (_editContext.Validate())
        {
            try
            {
                Repository.Save(_category);
                NavigationManager.NavigateTo("/beheer", true);
            }
            catch (Exception ex)
            {
                _submitFail = true;
            }
        }

    }

    private void Back()
    {
        NavigationManager.NavigateTo("/beheer");
    }
}
